/*
 * Copyright (c) 2020 The ZMK Contributors
 *
 * SPDX-License-Identifier: MIT
 */

#include <behaviors.dtsi>
#include <dt-bindings/zmk/keys.h>

&mt {
    tapping-term-ms = <200>;
    flavor = "tap-preferred";
};

&sk {
    release-after-ms = <2000>;
    quick-release;
};

/ {
    combos {
        compatible = "zmk,combos";

        left_bkt {
            bindings = <&kp LBKT>;
            key-positions = <4 5>;
            timeout-ms = <50>;
        };

        right_bkt {
            bindings = <&kp RBKT>;
            key-positions = <7 6>;
            timeout-ms = <50>;
        };

        left_par {
            bindings = <&kp LEFT_PARENTHESIS>;
            key-positions = <16 17>;
            timeout-ms = <50>;
        };

        right_par {
            bindings = <&kp RIGHT_PARENTHESIS>;
            key-positions = <19 18>;
            timeout-ms = <50>;
        };

        left_brace {
            bindings = <&kp LEFT_BRACE>;
            key-positions = <28 29>;
            timeout-ms = <50>;
        };

        right_brace {
            bindings = <&kp RIGHT_BRACE>;
            key-positions = <31 30>;
            timeout-ms = <50>;
        };

        bac {
            bindings = <&kp BACKSLASH>;
            key-positions = <6 5>;
        };

        pipe {
            bindings = <&kp PIPE>;
            key-positions = <18 17>;
        };

        game {
            bindings = <&to 4>;
            key-positions = <0 24 11 35>;
        };

        colemak {
            bindings = <&to 0>;
            key-positions = <11 35>;
        };

        qwerty {
            bindings = <&to 1>;
            key-positions = <0 24>;
        };
    };

    behaviors {
        hm: homerow_mods {
            compatible = "zmk,behavior-hold-tap";
            label = "HOMEROW_MODS";
            #binding-cells = <2>;
            tapping-term-ms = <200>;
            quick_tap_ms = <0>;
            flavor = "tap-preferred";
            bindings = <&kp>, <&kp>;

            quick-tap-ms = <180>;
            global-quick-tap;
        };

        ltq: ltq {
            compatible = "zmk,behavior-hold-tap";
            label = "LTQ";
            #binding-cells = <2>;
            tapping-term-ms = <200>;
            quick_tap_ms = <0>;
            flavor = "hold-preferred";
            bindings = <&mo>, <&kp>;

            quick-tap-ms = <180>;
            global-quick-tap;
        };

        as: as {
            compatible = "zmk,behavior-hold-tap";
            label = "AUTO_SHIFT";
            bindings = <&kp>, <&kp>;

            #binding-cells = <2>;
            tapping-term-ms = <135>;
            quick-tap-ms = <0>;
            flavor = "tap-preferred";
        };
    };

    keymap {
        compatible = "zmk,keymap";

        /* colemak layout */
        /* [TAB] q w f p g j l u y ; [ */
        /* [ESCAPE] a r s t d h n e i o ' */
        /* [SHIFT] z x c v b k m , . / [FN]*/
        /* [CTRL] [ALT] [SPACE] [ENTER] [WIN] [BACKSPACE] */

        qwerty {
            bindings = <
&hm CAPS TAB             &kp Q           &kp W             &kp E         &kp R             &kp T         &kp Y             &kp U              &kp I                &kp O                    &hm LG(LS(V)) P      &as UNDERSCORE MINUS
&hm LG(TAB) LA(TAB)      &hm LEFT_GUI A  &hm LEFT_ALT S    &hm LCTRL D   &hm LEFT_SHIFT F  &kp G         &kp H             &hm RIGHT_SHIFT J  &hm RCTRL K          &hm RIGHT_ALT L          &as COLON SEMICOLON  &as DOUBLE_QUOTES SQT
&hm LC(LS(Q)) LG(SPACE)  &kp Z           &kp X             &kp C         &kp V             &kp B         &kp N             &kp M              &as LESS_THAN COMMA  &as GREATER_THAN PERIOD  &as QUESTION SLASH   &as PLUS EQUAL
                                         &kp LEFT_CONTROL  &lt 2 ESCAPE  &lt 3 SPACE       &ltq 3 ENTER  &ltq 2 BACKSPACE  &kp LEFT_SHIFT
            >;
        };

        colemak {
            bindings = <
&hm CAPS TAB             &kp Q           &kp W             &kp F               &hm LG(LS(V)) P   &kp G         &kp J          &kp L              &kp U                &kp Y                    &as COLON SEMICOLON  &as UNDERSCORE MINUS
&hm LG(TAB) LA(TAB)      &hm LEFT_WIN A  &hm LEFT_ALT R    &hm LEFT_CONTROL S  &hm LEFT_SHIFT T  &kp D         &kp H          &hm RIGHT_SHIFT N  &hm RIGHT_CONTROL E  &hm RIGHT_ALT I          &kp O                &as DOUBLE_QUOTES SQT
&hm LC(LS(Q)) LG(SPACE)  &kp Z           &kp X             &kp C               &kp V             &kp B         &kp K          &kp M              &as LESS_THAN COMMA  &as GREATER_THAN PERIOD  &as QUESTION SLASH   &as PLUS EQUAL
                                         &kp LEFT_CONTROL  &lt 2 ESCAPE  &lt 3 SPACE       &ltq 3 ENTER  &ltq 2 BACKSPACE  &kp LEFT_SHIFT
            >;
        };

        nums {
            bindings = <
&kp F12          &kp F1                    &kp F2                &kp F3             &kp F4       &as LS(F5) F5  &kp F6         &kp F7         &kp F8        &kp F9                &kp F10                &kp F11
&as TILDE GRAVE  &as EXCLAMATION NUMBER_1  &as AT_SIGN NUMBER_2  &as HASH NUMBER_3  &kp N4       &kp N5         &kp N6         &kp N7         &kp N8        &kp N9                &kp N0                 &kp MINUS
&kp LEFT_SHIFT   &kp EXCLAMATION           &kp AT_SIGN           &kp HASH           &kp DOLLAR   &kp PERCENT    &kp CARET      &kp AMPERSAND  &kp ASTERISK  &kp LEFT_PARENTHESIS  &kp RIGHT_PARENTHESIS  &kp PIPE
                                         &kp LEFT_CONTROL  &lt 2 ESCAPE  &lt 3 SPACE       &ltq 3 ENTER  &ltq 2 BACKSPACE  &kp LEFT_SHIFT
            >;
        };

        func {
            bindings = <
&kp Q  &kp C_POWER   &kp C_SLEEP       &kp UP_ARROW  &kp K_LOCK   &kp E         &kp E          &kp C_VOLUME_DOWN  &kp UP_ARROW      &kp C_VOL_UP  &kp E  &kp E
&kp E  &kp K_POWER   &kp LEFT          &kp DOWN      &kp RIGHT    &kp E         &kp E          &kp LEFT           &kp DOWN          &kp RIGHT     &kp E  &kp E
&kp E  &kp K_COFFEE  &kp CLEAR         &kp E         &kp E        &kp E         &kp E          &kp C_PREV         &kp C_PLAY_PAUSE  &kp C_NEXT    &kp E  &kp E
                                         &kp LEFT_CONTROL  &lt 2 ESCAPE  &lt 3 SPACE       &ltq 3 ENTER  &ltq 2 BACKSPACE  &kp LEFT_SHIFT
            >;
        };

        mini-nums {
            bindings = <
&trans  &kp TAB           &kp Q             &kp W      &kp E        &trans        &trans         &kp N1      &kp N2  &kp N3  &trans  &trans
&trans  &kp LEFT_SHIFT    &kp A             &kp S      &kp D        &kp F         &trans         &kp N4      &kp N5  &kp N6  &kp N0  &trans
&trans  &kp LEFT_CONTROL  &kp Z             &kp X      &kp C        &kp V         &trans         &kp N7      &kp N8  &kp N9  &trans  &trans
                                         &kp LEFT_CONTROL  &lt 2 ESCAPE  &lt 3 SPACE       &ltq 3 ENTER  &ltq 2 BACKSPACE  &kp LEFT_SHIFT
            >;
        };

        layer_4 {
            bindings = <
&trans  &trans  &trans  &trans  &trans  &trans  &trans  &trans  &trans  &trans  &trans  &trans
&trans  &trans  &trans  &trans  &trans  &trans  &trans  &trans  &trans  &trans  &trans  &trans
&trans  &trans  &trans  &trans  &trans  &trans  &trans  &trans  &trans  &trans  &trans  &trans
                &trans  &trans  &trans  &trans  &trans  &trans
            >;
        };

        layer_5 {
            bindings = <
&trans  &trans  &trans  &trans  &trans  &trans  &trans  &trans  &trans  &trans  &trans  &trans
&trans  &trans  &trans  &trans  &trans  &trans  &trans  &trans  &trans  &trans  &trans  &trans
&trans  &trans  &trans  &trans  &trans  &trans  &trans  &trans  &trans  &trans  &trans  &trans
                &trans  &trans  &trans  &trans  &trans  &trans
            >;
        };
    };
};
