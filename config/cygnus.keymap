/*
 * Copyright (c) 2020 The ZMK Contributors
 *
 * SPDX-License-Identifier: MIT
 */

#include <behaviors.dtsi>
#include <dt-bindings/zmk/keys.h>

&mt {
    tapping-term-ms = <200>;
    flavor = "tap-preferred";
};

&sk {
    release-after-ms = <2000>;
    quick-release;
};

/ {
    combos {
        compatible = "zmk,combos";

        left_bkt {
            bindings = <&kp LBKT>;
            key-positions = <3 4>;
            timeout-ms = <50>;
        };

        right_bkt {
            bindings = <&kp RBKT>;
            key-positions = <7 8>;
            timeout-ms = <50>;
        };

        left_par {
            bindings = <&kp LEFT_PARENTHESIS>;
            key-positions = <15 16>;
            timeout-ms = <50>;
        };

        right_par {
            bindings = <&kp RIGHT_PARENTHESIS>;
            key-positions = <19 20>;
            timeout-ms = <50>;
        };

        left_brace {
            bindings = <&kp LEFT_BRACE>;
            key-positions = <27 28>;
            timeout-ms = <50>;
        };

        right_brace {
            bindings = <&kp RIGHT_BRACE>;
            key-positions = <31 32>;
            timeout-ms = <50>;
        };

        bac {
            bindings = <&kp BACKSLASH>;
            key-positions = <6 7>;
        };

        pipe {
            bindings = <&kp PIPE>;
            key-positions = <18 19>;
        };

        equ {
            bindings = <&kp EQUAL>;
            key-positions = <4 5>;
        };

        plus {
            bindings = <&kp PLUS>;
            key-positions = <16 17>;
        };

        de {
            bindings = <&kp MINUS>;
            key-positions = <28 29>;
        };

        underline {
            bindings = <&kp UNDERSCORE>;
            key-positions = <30 31>;
        };

        reset {
            bindings = <&reset>;
            key-positions = <0 24 11 35>;
        };
    };

    behaviors {
        hm: homerow_mods {
            compatible = "zmk,behavior-hold-tap";
            label = "HOMEROW_MODS";
            #binding-cells = <2>;
            tapping-term-ms = <200>;
            quick_tap_ms = <0>;
            flavor = "tap-preferred";
            bindings = <&kp>, <&kp>;

            quick-tap-ms = <180>;
            global-quick-tap;
        };

        ltq: ltq {
            compatible = "zmk,behavior-hold-tap";
            label = "LTQ";
            #binding-cells = <2>;
            tapping-term-ms = <200>;
            quick_tap_ms = <0>;
            flavor = "hold-preferred";
            bindings = <&mo>, <&kp>;

            quick-tap-ms = <180>;
            global-quick-tap;
        };

        as: as {
            compatible = "zmk,behavior-hold-tap";
            label = "AUTO_SHIFT";
            bindings = <&kp>, <&kp>;

            #binding-cells = <2>;
            tapping-term-ms = <135>;
            quick-tap-ms = <0>;
            flavor = "tap-preferred";
        };
    };

    keymap {
        compatible = "zmk,keymap";

        /* colemak layout */
        /* [TAB] q w f p g j l u y ; [ */
        /* [ESCAPE] a r s t d h n e i o ' */
        /* [SHIFT] z x c v b k m , . / [FN]*/
        /* [CTRL] [ALT] [SPACE] [ENTER] [WIN] [BACKSPACE] */

        qwerty {
            bindings = <
&hm C_PLAY_PAUSE C_NEXT  &kp Q           &kp W             &kp E        &kp R             &kp T         &kp Y          &kp U              &kp I                &kp O                    &hm LG(LS(V)) P      &kp LEFT_BRACKET
&hm K_PASTE K_COPY       &hm LEFT_GUI A  &hm LEFT_ALT S    &hm LCTRL D  &hm LEFT_SHIFT F  &kp G         &kp H          &hm RIGHT_SHIFT J  &hm RCTRL K          &hm RIGHT_ALT L          &as COLON SEMICOLON  &kp DOUBLE_QUOTES
&kp LSHFT                &kp Z           &kp X             &kp C        &kp V             &kp B         &kp N          &kp M              &as LESS_THAN COMMA  &as GREATER_THAN PERIOD  &as QUESTION SLASH   &to 1
                                         &ltq 4 BACKSPACE  &lt 2 TAB    &lt 3 SPACE       &ltq 2 ENTER  &ltq 3 ESCAPE  &ltq 4 DEL
            >;
        };

        colemak {
            bindings = <
&hm C_PLAY_PAUSE C_NEXT  &kp Q           &kp W             &kp F               &hm LG(LS(V)) P   &kp G         &kp J          &kp L              &kp U                &kp Y            &kp SEMI  &kp LBKT
&hm K_PASTE K_COPY       &hm LEFT_WIN A  &hm LEFT_ALT R    &hm LEFT_CONTROL S  &hm LEFT_SHIFT T  &kp D         &kp H          &hm RIGHT_SHIFT N  &hm RIGHT_CONTROL E  &hm RIGHT_ALT I  &kp O     &kp APOS
&kp LSHFT                &kp Z           &kp X             &kp C               &kp V             &kp B         &kp K          &kp M              &kp COMMA            &kp DOT          &kp FSLH  &to 0
                                         &ltq 4 BACKSPACE  &lt 3 TAB           &lt 2 SPACE       &ltq 2 ENTER  &ltq 3 ESCAPE  &ltq 4 DEL
            >;
        };

        nums {
            bindings = <
&kp F12    &kp F1           &kp F2            &kp F3     &kp F4       &kp F5        &kp F6         &kp F7         &kp F8        &kp F9                &kp F10                &kp F11
&kp GRAVE  &kp N1           &kp N2            &kp N3     &kp N4       &kp N5        &kp N6         &kp N7         &kp N8        &kp N9                &kp N0                 &kp MINUS
&kp TILDE  &kp EXCLAMATION  &kp AT_SIGN       &kp HASH   &kp DOLLAR   &kp PERCENT   &kp CARET      &kp AMPERSAND  &kp ASTERISK  &kp LEFT_PARENTHESIS  &kp RIGHT_PARENTHESIS  &kp PIPE
                            &ltq 4 BACKSPACE  &lt 3 TAB  &lt 2 SPACE  &ltq 2 ENTER  &ltq 3 ESCAPE  &ltq 4 DEL
            >;
        };

        mini-nums {
            bindings = <
&trans  &kp TAB           &kp Q             &kp W      &kp E        &trans        &trans         &kp N1      &kp N2  &kp N3  &trans  &trans
&trans  &kp LEFT_SHIFT    &kp A             &kp S      &kp D        &kp F         &trans         &kp N4      &kp N5  &kp N6  &kp N0  &trans
&trans  &kp LEFT_CONTROL  &kp Z             &kp X      &kp C        &kp V         &trans         &kp N7      &kp N8  &kp N9  &trans  &trans
                          &ltq 1 BACKSPACE  &lt 3 TAB  &lt 2 SPACE  &ltq 2 ENTER  &ltq 3 ESCAPE  &ltq 4 DEL
            >;
        };

        func {
            bindings = <
&kp Q  &kp W  &kp K_SCREENSAVER  &kp K_SLEEP  &kp K_LOCK   &kp E         &kp E          &kp C_BRIGHTNESS_DEC  &kp C_BRI_MAX     &kp C_BRIGHTNESS_INC  &kp E  &kp E
&kp E  &kp E  &kp E              &kp E        &kp E        &kp E         &kp E          &kp C_PREV            &kp C_PLAY_PAUSE  &kp C_NEXT            &kp E  &kp E
&kp E  &kp E  &kp E              &kp E        &kp E        &kp E         &kp E          &kp C_VOLUME_DOWN     &kp K_MUTE        &kp C_VOL_UP          &kp E  &kp E
              &ltq 1 BACKSPACE   &lt 3 TAB    &lt 2 SPACE  &ltq 2 ENTER  &ltq 3 ESCAPE  &ltq 4 DEL
            >;
        };
    };
};
